let firstCardsIndex = 0;
let firstCards = [
    // {
    //     title: '–¢–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏',
    //     text: '<a href="https://google.com" target="_blank">Google</a><br/><br/>' +
    //         '<a href="https://docs.google.com/spreadsheets/d/15OS4jVE_FvyVH3FOu-WtvtApahoeX24x-fd7o0R2sus/edit#gid=0" target="_blank">Document</a><br/><br/>' +
    //         '<a href="/achieved.space.apk" target="_blank">–°—Å—ã–ª–∫–∞ –Ω–∞ APK</a><br/>' + ''
    // },
    {
        emoji: '‚òÄÔ∏è',
        title: 'Several cards<br/>will be available<br/>each day',
        text: 'It may be a task, a word or something else'
    },
    {
        emoji: 'üóÇ',
        title: 'Cards have categories and<br/>difficulty levels',
        text: 'Points are awarded for completion'
    },
    {
        emoji: 'üìÖ',
        title: 'Some cards<br/>can be completed<br/>only once',
        text: 'Others<br/>have to be done<br/> every day'
    },
]

let states = {
    strength: 0,
    perception: 0,
    endurance: 0,
    charisma: 0,
    intelligence: 0,
    agility: 0,
    luck: 0,
    vocabulary: 0,
    imagination: 0,
}

function done() {
    console.log('done')
    // getNextCard()
}

function like() {
    console.log('like')
    // getNextCard()
}

function dislike() {
    console.log('dislike')
    // getNextCard()
}

function next(e) {
    if (e.target.id === 'skip' || e.target.id === 'next') {
        getNextCard()
    } else if (e.target.id === 'back')
        getPrevCard()
}

function back() {
    console.log('back')
}

let emojisArray = [
    'üòÑ','üòÉ','üòÄ','üòä','‚ò∫','üòâ','üòç','üòò','üòö','üòó','üòô','üòú','üòù','üòõ','üò≥','üòÅ','üòî','üòå','üòí','üòû','üò£','üò¢','üòÇ','üò≠','üò™','üò•','üò∞','üòÖ','üòì','üò©','üò´','üò®','üò±','üò†','üò°','üò§','üòñ','üòÜ','üòã','üò∑','üòé','üò¥','üòµ','üò≤','üòü','üò¶','üòß','üòà','üëø','üòÆ','üò¨','üòê','üòï','üòØ','üò∂','üòá','üòè','üòë','üë≤','üë≥','üëÆ','üë∑','üíÇ','üë∂','üë¶','üëß','üë®','üë©','üë¥','üëµ','üë±','üëº','üë∏','üò∫','üò∏','üòª','üòΩ','üòº','üôÄ','üòø','üòπ','üòæ','üëπ','üë∫','üôà','üôâ','üôä','üíÄ','üëΩ','üí©','üî•','‚ú®','üåü','üí´','üí•','üí¢','üí¶','üíß','üí§','üí®','üëÇ','üëÄ','üëÉ','üëÖ','üëÑ','üëç','üëé','üëå','üëä','‚úä','‚úå','üëã','‚úã','üëê','üëÜ','üëá','üëâ','üëà','üôå','üôè','‚òù','üëè','üí™','üö∂','üèÉ','üíÉ','üë´','üë™','üë¨','üë≠','üíè','üíë','üëØ','üôÜ','üôÖ','üíÅ','üôã','üíÜ','üíá','üíÖ','üë∞','üôé','üôç','üôá','üé©','üëë','üëí','üëü','üëû','üë°','üë†','üë¢','üëï','üëî','üëö','üëó','üéΩ','üëñ','üëò','üëô','üíº','üëú','üëù','üëõ','üëì','üéÄ','üåÇ','üíÑ','üíõ','üíô','üíú','üíö','‚ù§','üíî','üíó','üíì','üíï','üíñ','üíû','üíò','üíå','üíã','üíç','üíé','üë§','üë•','üí¨','üë£','üí≠','üê∂','üê∫','üê±','üê≠','üêπ','üê∞','üê∏','üêØ','üê®','üêª','üê∑','üêΩ','üêÆ','üêó','üêµ','üêí','üê¥','üêë','üêò','üêº','üêß','üê¶','üê§','üê•','üê£','üêî','üêç','üê¢','üêõ','üêù','üêú','üêû','üêå','üêô','üêö','üê†','üêü','üê¨','üê≥','üêã','üêÑ','üêè','üêÄ','üêÉ','üêÖ','üêá','üêâ','üêé','üêê','üêì','üêï','üêñ','üêÅ','üêÇ','üê≤','üê°','üêä','üê´','üê™','üêÜ','üêà','üê©','üêæ','üíê','üå∏','üå∑','üçÄ','üåπ','üåª','üå∫','üçÅ','üçÉ','üçÇ','üåø','üåæ','üçÑ','üåµ','üå¥','üå≤','üå≥','üå∞','üå±','üåº','üåê','üåû','üåù','üåö','üåë','üåí','üåì','üåî','üåï','üåñ','üåó','üåò','üåú','üåõ','üåô','üåç','üåé','üåè','üåã','üåå','üå†','‚≠ê','‚òÄ','‚õÖ','‚òÅ','‚ö°','‚òî','‚ùÑ','‚õÑ','üåÄ','üåÅ','üåà','üåä','üéç','üíù','üéé','üéí','üéì','üéè','üéÜ','üéá','üéê','üéë','üéÉ','üëª','üéÖ','üéÑ','üéÅ','üéã','üéâ','üéä','üéà','üéå','üîÆ','üé•','üì∑','üìπ','üìº','üíø','üìÄ','üíΩ','üíæ','üíª','üì±','‚òé','üìû','üìü','üì†','üì°','üì∫','üìª','üîä','üîâ','üîà','üîá','üîî','üîï','üì¢','üì£','‚è≥','‚åõ','‚è∞','‚åö','üîì','üîí','üîè','üîê','üîë','üîé','üí°','üî¶','üîÜ','üîÖ','üîå','üîã','üîç','üõÅ','üõÄ','üöø','üöΩ','üîß','üî©','üî®','üö™','üö¨','üí£','üî´','üî™','üíä','üíâ','üí∞','üí¥','üíµ','üí∑','üí∂','üí≥','üí∏','üì≤','üìß','üì•','üì§','‚úâ','üì©','üì®','üìØ','üì´','üì™','üì¨','üì≠','üìÆ','üì¶','üìù','üìÑ','üìÉ','üìë','üìä','üìà','üìâ','üìú','üìã','üìÖ','üìÜ','üìá','üìÅ','üìÇ','‚úÇ','üìå','üìé','‚úí','‚úè','üìè','üìê','üìï','üìó','üìò','üìô','üìì','üìî','üìí','üìö','üìñ','üîñ','üìõ','üî¨','üî≠','üì∞','üé®','üé¨','üé§','üéß','üéº','üéµ','üé∂','üéπ','üéª','üé∫','üé∑','üé∏','üëæ','üéÆ','üÉè','üé¥','üÄÑ','üé≤','üéØ','üèà','üèÄ','‚öΩ','‚öæ','üéæ','üé±','üèâ','üé≥','‚õ≥','üöµ','üö¥','üèÅ','üèá','üèÜ','üéø','üèÇ','üèä','üèÑ','üé£','‚òï','üçµ','üç∂','üçº','üç∫','üçª','üç∏','üçπ','üç∑','üç¥','üçï','üçî','üçü','üçó','üçñ','üçù','üçõ','üç§','üç±','üç£','üç•','üçô','üçò','üçö','üçú','üç≤','üç¢','üç°','üç≥','üçû','üç©','üçÆ','üç¶','üç®','üçß','üéÇ','üç∞','üç™','üç´','üç¨','üç≠','üçØ','üçé','üçè','üçä','üçã','üçí','üçá','üçâ','üçì','üçë','üçà','üçå','üçê','üçç','üç†','üçÜ','üçÖ','üåΩ','üè†','üè°','üè´','üè¢','üè£','üè•','üè¶','üè™','üè©','üè®','üíí','‚õ™','üè¨','üè§','üåá','üåÜ','üèØ','üè∞','‚õ∫','üè≠','üóº','üóæ','üóª','üåÑ','üåÖ','üåÉ','üóΩ','üåâ','üé†','üé°','‚õ≤','üé¢','üö¢','‚õµ','üö§','üö£','‚öì','üöÄ','‚úà','üí∫','üöÅ','üöÇ','üöä','üöâ','üöû','üöÜ','üöÑ','üöÖ','üöà','üöá','üöù','üöã','üöÉ','üöé','üöå','üöç','üöô','üöò','üöó','üöï','üöñ','üöõ','üöö','üö®','üöì','üöî','üöí','üöë','üöê','üö≤','üö°','üöü','üö†','üöú','üíà','üöè','üé´','üö¶','üö•','‚ö†','üöß','üî∞','‚õΩ','üèÆ','üé∞','‚ô®','üóø','üé™','üé≠','üìç','üö©','‚¨Ü','‚¨á','‚¨Ö','‚û°','üî†','üî°','üî§','‚Üó','‚Üñ','‚Üò','‚Üô','‚Üî','‚Üï','üîÑ','‚óÄ','‚ñ∂','üîº','üîΩ','‚Ü©','‚Ü™','‚Ñπ','‚è™','‚è©','‚è´','‚è¨','‚§µ','‚§¥','üÜó','üîÄ','üîÅ','üîÇ','üÜï','üÜô','üÜí','üÜì','üÜñ','üì∂','üé¶','üàÅ','üàØ','üà≥','üàµ','üà¥','üà≤','üâê','üàπ','üà∫','üà∂','üàö','üöª','üöπ','üö∫','üöº','üöæ','üö∞','üöÆ','üÖø','‚ôø','üö≠','üà∑','üà∏','üàÇ','‚ìÇ','üõÇ','üõÑ','üõÖ','üõÉ','üâë','„äô','„äó','üÜë','üÜò','üÜî','üö´','üîû','üìµ','üöØ','üö±','üö≥','üö∑','üö∏','‚õî','‚ú≥','‚ùá','‚ùé','‚úÖ','‚ú¥','üíü','üÜö','üì≥','üì¥','üÖ∞','üÖ±','üÜé','üÖæ','üí†','‚ûø','‚ôª','‚ôà','‚ôâ','‚ôä','‚ôã','‚ôå','‚ôç','‚ôé','‚ôè','‚ôê','‚ôë','‚ôí','‚ôì','‚õé','üîØ','üèß','üíπ','üí≤','üí±','¬©','¬Æ','‚Ñ¢','„ÄΩ','„Ä∞','üîù','üîö','üîô','üîõ','üîú','‚ùå','‚≠ï','‚ùó','‚ùì','‚ùï','‚ùî','üîÉ','üïõ','üïß','üïê','üïú','üïë','üïù','üïí','üïû','üïì','üïü','üïî','üï†','üïï','üïñ','üïó','üïò','üïô','üïö','üï°','üï¢','üï£','üï§','üï•','üï¶','‚úñ','‚ûï','‚ûñ','‚ûó','‚ô†','‚ô•','‚ô£','‚ô¶','üíÆ','üíØ','‚úî','‚òë','üîò','üîó','‚û∞','üî±','üî≤','üî≥','‚óº','‚óª','‚óæ','‚óΩ','‚ñ™','‚ñ´','üî∫','‚¨ú','‚¨õ','‚ö´','‚ö™','üî¥','üîµ','üîª','üî∂','üî∑','üî∏','üîπ'
];

let getEmoji = () => {
    return emojisArray[Math.floor(Math.random() * emojisArray.length)];
};

document.getElementById('done').addEventListener('touchend', done, false);
document.getElementById('like').addEventListener('touchend', like, false);
document.getElementById('dislike').addEventListener('touchend', dislike, false);
document.getElementById('skip').addEventListener('touchend', next, false);
// document.getElementById('back').addEventListener('touchend', back, false);

// Desktop website
// document.getElementById('done').addEventListener('click', done, false);
// document.getElementById('like').addEventListener('click', like, false);
// document.getElementById('dislike').addEventListener('click', dislike, false);
// document.getElementById('next').addEventListener('click', skip, false);
// document.getElementById('back').addEventListener('click', back, false);

function toggleFullScreen() {

    console.log('fullscreen')

    if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen().then();
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen().then();
        }
    }
}

let cards = []

async function get(url) {
    let response = await fetch(url);
    if (response.ok) {
        return await response.json();
    } else {
        // console.error(response)
    }
}

function shuffle(a) {
    let j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}

get('cards').then(cardsArray => {
    cards = shuffle(cardsArray)
    console.log(cards)
})

let cardElement = document.getElementById('card')
let emoji = document.getElementById('emoji')
let title = document.getElementById('title')
let text = document.getElementById('text')
let info = document.getElementById('info')

let likeMark = document.getElementById('like-mark')
let doneMark = document.getElementById('done-mark')
let dislikeMark = document.getElementById('dislike-mark')

let index = 0;

function getNextCard() {

    if (firstCardsIndex < firstCards.length) {
        renderCard(firstCards[firstCardsIndex])
        firstCardsIndex++
        return
    }

    index = index + 1;
    if (index >= cards.length) {
        index = 0
    }
    let card = cards[index];
    renderCard(card)
}

function getPrevCard() {

    index = index - 1;
    if (index < 0) {
        index = cards.length - 1
    }
    let card = cards[index];
    renderCard(card)
}

let likeCount = 0
let likeCard = false
let doneCount = 0
let doneCard = false

function renderCard(card) {

    // console.log(index)
    likeCard = false
    doneCard = false

    if (!card.text)
        card.text = 'EMPTY TEXT'

    // if (!card.id)
    //     card.id = ''

    // if (!card.categories)
    //     card.categories = '?'

    // if (!card.level)
    //     card.level = '?'

    emoji.innerText = card.emoji ? card.emoji : getEmoji()
    title.innerHTML = card.title
    text.innerHTML = card.text
    // info.innerHTML = card.id > 0 ? 'ID: ' + card.id + ' <br/>Categories: ' + card.categories + ' <br/>Level: ' + card.level : ''
    info.innerHTML = card.categories ? card.categories.toUpperCase().replaceAll(':', ' +').replaceAll(',', '<br/>') : ''

    likeMark.style.display = 'none'
    doneMark.style.display = 'none'
    dislikeMark.style.display = 'none'
    cardElement.style.backgroundColor = 'ghostwhite'
}

let random = () => {
    return Math.floor(Math.random() * 10);
}

window.onload = function () {

    // console.log(cardElement.style.width)

    let paddingLeft = window.screen.width * 0.1
    let paddingTop = window.screen.height * 0.1
    // cardElement.style.left = paddingLeft + 'px'
    // cardElement.style.top = paddingTop + 'px'

    let touchStartLocation
    let left = false
    let right = false
    let top = false
    let bottom = false

    cardElement.addEventListener('touchstart', function (e) {
        // grab the location of touch
        cardElement.style.transition = 'none';
        touchStartLocation = e.targetTouches[0];
        // leftPadding = cardElement.style.left.slice(0, -2) * 1
        // topPadding = cardElement.style.top.slice(0, -2) * 1

        cardElement.classList.add('hold')
    })

    cardElement.addEventListener('touchmove', function (e) {

        // grab the location of touch
        let touchLocation = e.targetTouches[0];

        let difX = touchLocation.pageX - touchStartLocation.pageX
        if (paddingLeft + difX >= 0) {
            left = false
            cardElement.style.left = paddingLeft + difX + 'px';
        } else {
            left = true
            cardElement.style.left = '0px';
        }

        let difY = touchLocation.pageY - touchStartLocation.pageY
        if (paddingTop + difY >= 0) {
            top = false
            cardElement.style.top = paddingTop + difY + 'px';
        } else {
            top = true
            cardElement.style.top = '0px';
        }


        if (paddingLeft + difX >= 2 * paddingLeft) {
            right = true
            cardElement.style.left = 2 * paddingLeft + 'px';
        } else {
            right = false
        }

        if (paddingTop + difY >= 2 * paddingTop) {
            bottom = true
            cardElement.style.top = 2 * paddingTop + 'px';
        } else {
            bottom = false
        }

        if (top && right) {
            // console.log('LIKE')
            if (!likeCard) {
                likeMark.style.display = 'flex'
                document.getElementById('like-count').innerText = ++likeCount
            }
            likeCard = true
            // cardElement.style.backgroundColor = 'var(--color-green)'
        }

        if (top && left) {
            // console.log('DONE')
            if (!doneCard) {
                doneMark.style.display = 'flex'
                document.getElementById('done-count').innerText = ++doneCount
            }
            doneCard = true
        }

        if (bottom && left) {
            dislikeMark.style.display = 'flex'
            // console.log('DISLIKE')
        }

        // console.log(top, right, bottom, left)
    })

    function setCardCenter() {
        cardElement.style.transition = '0.5s left, 0.5s top';
        cardElement.style.left = paddingLeft + 'px';
        cardElement.style.top = paddingTop + 'px';
    }

    cardElement.addEventListener('touchend', function (e) {

        setCardCenter()

        if (right && bottom) {
            getNextCard()
        }

        cardElement.classList.remove('hold')

        left = false
        right = false
        top = false
        bottom = false
    })
}
// /* record the position of the touch
//   when released using touchend event.
//   This will be the drop position. */
//
